---
description: Overall project guidelines
globs: 
alwaysApply: true
---
Below is the refined, comprehensive guide for building a macOS‑focused Rust video player crate that uses mpv (via libmpv‑rs) and a custom Lua OSC. This crate is designed as a standalone library that spawns mpv in its own window (using mpv’s default window), loads a custom configuration for stability (with overrides allowed), and handles playback controls entirely within mpv via the Lua OSC theme. Integration (for example, with a Tauri app) will be done separately by calling this crate’s public API.

---

# Comprehensive Guide for Building a macOS Video Player Crate Using mpv and libmpv‑rs

## 1. Overview

This guide describes how to build a modular, cross‑platform (macOS‑first) video player in Rust. The player leverages mpv’s robust playback engine through libmpv‑rs, and it uses a customized Lua OSC (based on mpv‑osc‑tethys) to deliver a “Netflix‑like” interface for playback controls. For v1, the focus is on macOS using the installed mpv binary (development mode), with plans to add Windows and Linux support later, including options for static linking.

---

## 2. Objectives

- **Modular Development:**  
  Develop the video player as a standalone library crate with a clean API for launching media playback, applying configuration overrides, and handling progress reporting if needed.
  
- **macOS‑First Target:**  
  Initially target macOS. The design will allow adding support for Windows and Linux in future versions.

- **mpv Integration:**  
  Use mpv’s built‑in window (no custom windowing library) to simplify development and later integrate the player within a Tauri webview if desired.

- **Playback Controls:**  
  Rely entirely on mpv’s Lua OSC (customized from mpv‑osc‑tethys) for playback control (play/pause, seek, volume, etc.), removing the need for native control implementations.

- **Stable Configuration:**  
  Load a dedicated mpv configuration file for stability while still allowing user or external overrides.

- **Logging & Debugging:**  
  Implement logging and debugging using common-sense approaches (for example, using Rust’s logging ecosystem) to track errors and playback events.

- **Dependency Management:**  
  For development, rely on the installed mpv version. Future iterations will consider static linking options.

---

## 3. Repository & Project Structure

Structure the repository as a standalone Git library crate. This approach ensures the video player logic, assets, and configuration remain isolated and easily integrable ints.

### 3.1. Recommended Folder Structure

```
mpv-video-player/
├── Cargo.toml                  # Library crate configuration
├── README.md                   # Project overview, build instructions, and usage notes
├── src/
│   ├── lib.rs                  # Public API exposing core functionality
│   ├── player.rs               # Module for spawning and controlling mpv
│   └── config.rs               # Module for managing mpv configuration and overrides
├── assets/
│   ├── lua/
│   │   └── osc-tethys.lua      # Custom OSC Lua script (modified for a Netflix‑like UI)
│   └── mpv_config.toml         # Default mpv configuration file for stability
└── examples/
    └── integration_example.rs  # Example usage demonstrating how to call the crate’s API
```

*Note:* The structure can be extended (or wrapped in a Cargo workspace) if additional related crates are added later.

---

## 4. Implementation Details

### 4.1. Spawning mpv with the Custom Lua OSC

Since mpv will be launched as a separate process in its own window, use Rust’s process spawning facilities. The player will pass a custom Lua OSC script and load a dedicated configuration file.

#### Example Code Snippet:

```rust
use std::process::Command;
use std::path::PathBuf;
use std::io;

/// Spawns mpv with the specified media file or URL.
/// Additional command-line arguments can override default configurations.
pub fn spawn_mpv(file_or_url: &str, extra_args: &[&str]) -> io::Result<()> {
    // Build the argument list with key options:
    // - Enable the OSC for controls.
    // - Load the custom Lua OSC script.
    // - Load the dedicated mpv configuration file.
    let mut args = vec![
        "--osc=yes",
        &format!("--script={}", get_lua_theme_path().to_string_lossy()),
        &format!("--config={}", get_mpv_config_path().to_string_lossy()),
    ];
    args.extend_from_slice(extra_args);
    args.push(file_or_url);

    // Spawn mpv asynchronously. For development, rely on the system-installed mpv.
    Command::new("mpv")
        .args(&args)
        .spawn()?;
    Ok(())
}

/// Returns the path to the custom Lua OSC theme.
fn get_lua_theme_path() -> PathBuf {
    PathBuf::from("assets/lua/osc-tethys.lua")
}

/// Returns the path to the dedicated mpv configuration file.
fn get_mpv_config_path() -> PathBuf {
    PathBuf::from("assets/mpv_config.toml")
}
```

> **Note:** The option `--config=` is assumed to load a configuration file. Verify the correct mpv command‑line parameter in the latest mpv documentation and adjust as needed.

---

### 4.2. MPV Configuration & Overrides

Load a dedicated configuration file to ensure stable playback. Users or integrators can supply additional command‑line arguments (`extra_args`) to override defaults. The `assets/mpv_config.toml` file should include settings that promote stability and performance on macOS.

Example `mpv_config.toml` (contents to be tailored based on best practices):

```toml
# Example mpv configuration for stability
vo=opengl
hwdec=auto
audio-channels=stereo
# Additional options as needed...
```

*Tip:* Update and refine the configuration file based on testing and user feedback.

---

### 4.3. Custom Lua OSC for Playback Controls

The video player relies on mpv’s Lua OSC for all playback control functionalities. Customize the `osc-tethys.lua` script to achieve a modern, minimalistic interface similar to Netflix’s controls. Place the modified script in `assets/lua/`.

*Reminder:* Validate and test your Lua OSC customizations against current mpv versions and ensure they load correctly via the command‑line option.

---

### 4.4. Logging & Debugging

Implces (for example, via the [`log`](https://crates.io/crates/log) crate and a logger implementation such as [`env_logger`](https://crates.io/crates/env_logger)). Log errors when spawning mpv, configuration load failures, and other runtime events.

#### Example Logging Setup:

```rust
use log::{info, error};

fn setup_logging() {
    env_logger::init();
}

// Use logging in your functions:
pub fn spawn_mpv(file_or_url: &str, extra_args: &[&str]) -> std::io::Result<()> {
    info!("Launching mpv for media: {}", file_or_url);
    // ... (spawn process)
    // Log errors, if any:
    // error!("Failed to launch mpv: {}", e);
    Ok(())
}
```

*Note:* Adjust the logging verbosity as needed during development and production.

---

### 4.5. Dependency Management

- **Development:**  
  For v1, the crate assumes that mpv is installed on the target macOS system. Ensure that developers have mpv available in their PATH.
  
- **Future Iterations:**  
  In later versions, consider options for static linking via libmpv‑rs or bundling the mpv binary with the application.

---

## 5. Packaging & Distribution

### 5.1. Crate Packaging

- **Library Crate:**  
  The video player is packaged as a library crate that exposes a minimal API (e.g., a `spawn_mpv` function). External applications (such as a Tauri app) can call this API to launch and control playback.
  
- **Asset Bundling:**  
  Ensure that the `assets/` directory (containing the Lua OSC script and configuration file) is included in the final package. Update your `.gitignore` and packaging scripts accordingly.

### 5.2. Integration Example

In the `examples/integration_example.rs`, provide a minimal example of how to call the public API:

```rust
fn main() {
    // Initialize logging
    mpv_video_player::setup_logging();

    // Example media file or URL
    let media = "path/to/media/file.mp4";
    
    // Optional extra arguments to override defaults
    let extra_args = ["--volume=50"];

    if let Err(e) = mpv_video_player::spawn_mpv(media, &extra_args) {
        eprintln!("Error launching video player: {}", e);
    }
}
```

Compile and run this example to verify that mpv launches correctly with the custom Lua OSC and configuration.

---

## 6. Conclusion

This guide has detailed the design and implementation of a macOS‑focused video player crate in Rust that uses mpv and libmpv‑rs. The key highlights include:

- **Standalone Library Crate:**  
  A modular repository structure that isolates playback logic and assets.

- **mpv Integration:**  
  Spawning mpv with a custom Lua OSC for a modern UI and loading a dedicated configuration for stability.

- **Platform Focus:**  
  macOS is the primary target for v1, with future plans to add Windows and Linux support.

- **Simplified Controls:**  
  Playback controls are entirely handled by mpv through the Lua OSC, reducing the need for native UI controls.

- **Flexible Configuration & Logging:**  
  The design allows for configuration overrides and employs standard logging for debugging.

By following this comprehensive guide, you will have a robust and maintainable video player crate that can later be integrated into broader applications (such as a Tauri app) using its well‑defined API.

---